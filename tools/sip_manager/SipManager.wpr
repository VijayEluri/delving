#!wing
#!version=3.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.directory-list = [{'dirloc': loc('.'),
                        'excludes': (),
                        'filter': '*',
                        'include_hidden': False,
                        'recursive': True,
                        'watch_for_changes': True}]
proj.file-type = 'normal'
[user attributes]
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'eMoOLvbXl7dltNNhOQ8qfpE6RW'\
        'ol5DYl',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   3],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.38598326359832635,
                 'override_title': None,
                 'pagelist': [('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('debug-exceptions',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'column-widths': [1.0],
                                 'expanded-nodes': [(0,),
        (0,
         0),
        (0,
         0,
         0),
        (0,
         1)],
                                 'selected-nodes': [(0,
        0,
        0,
        0)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('batch-search',
                               'tall',
                               0,
                               {'fScope': {'fFileSetName': '',
        'fLocation': None,
        'fRecursive': True,
        'fType': 'project-files'},
                                'fSearchSpec': {'fEndPos': None,
        'fIncludeLinenos': True,
        'fInterpretBackslashes': False,
        'fMatchCase': False,
        'fOmitBinary': True,
        'fRegexFlags': 46,
        'fReplaceText': u'endblocktrans',
        'fReverse': False,
        'fSearchText': u'static_media',
        'fStartPos': 0,
        'fStyle': 'text',
        'fWholeWords': False,
        'fWrap': True},
                                'fUIOptions': {'fAutoBackground': True,
        'fFilePrefix': 'short-file',
        'fFindAfterReplace': True,
        'fInSelection': False,
        'fIncremental': True,
        'fReplaceOnDisk': False,
        'fShowFirstMatch': False,
        'fShowLineno': True,
        'fShowReplaceWidgets': False},
                                'replace-entry-expanded': False,
                                'search-entry-expanded': False}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': False,
                                'wrap-lines': True}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {u'By Module': {'column-w'\
        'idths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../rhine_cms/rhine_cms/__init__.py'),
                      '')]}},
                                'browse_mode': u'By Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('debug-data',
                               'tall',
                               0,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [2],
        'notebook_display': 'tabs only',
        'notebook_percent': 0.42201834862385323,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      0,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {None: []},
                       'sel-line': 0,
                       'sel-line-start': 0,
                       'selection_end': 0,
                       'selection_start': 0}),
                     ('debug-probe',
                      'wide',
                      1,
                      {'attrib-starts': [],
                       'first-line': 12,
                       'folded-linenos': [],
                       'history': {None: ["u'%s' % u'p\xc3\xb6lsa'\n",
        'print xml\n',
        'self.reports[provider]\n'],
                                   u'file:/Applications/WingIDE.app/Contents/MacOS/src/testing/runners/run_unittests_xml.py': [""\
        "self.qp._parseDate(('1970',_Q.DATE_EPOC_10))\n",
        "self.qp._parseDate(('1970',_Q.DATE_EPOC_10)) == ('1970-01-01', '197"\
        "9-12-31')\n",
        'str(query)\n',
        'ustr(query)\n',
        "str('errt')\n",
        'import datetime\n',
        "datetime.date('1982-1-3')\n",
        "datetime.datetime('1982-1-3')\n",
        "datetime.time('1982-1-3')\n",
        'datetime.time(1982,2,3)\n',
        'datetime.date(1982,2,3)\n',
        'datetime.date(1982)\n',
        'datetime.date(1982,3,4)\n',
        'datetime.date(-1982,3,4)\n',
        'datetime.MINYEAR\n',
        '1934 <= 1923\n',
        '1934 <= 1954\n',
        '-1934 <= 1954\n',
        '-1934 <= -134\n',
        '1934 <= -134\n',
        "'-1934' <= '-134'\n",
        'd1 < d2\n'],
                                   u'file:/Users/jaclu/proj/Elmer/sql_structure/db_reset_clm_ablm.py': [''\
        'labels\n',
        'self.labels\n',
        'self.labels.keys()\n',
        "self.labels['ylle']\n"],
                                   u'file:/Users/jaclu/proj/Elmer/sql_structure/db_reset_clm_refs.py': [""\
        "s.getConcept('skola')\n",
        's.getConcept(88)\n',
        's.getConcept(935)\n',
        'lst[1]\n',
        'self.clm.getConcept(1)\n',
        'self.clm.getConcept(2)\n',
        'self.clm.getConcept(3)\n',
        'self.clm.getConcept(4)\n',
        'len(self.all_concepts)\n',
        'len(a)\n',
        'outlines.sort()\n',
        'outlines\n',
        'query\n',
        'self.clm.getConcept(7522)\n',
        "self.clm.getConcept(7522)['labels']\n",
        'self.elm_in.escape(label)\n',
        'lst[0]\n',
        'a\n',
        'for s in a:\n',
        ' print s\n',
        'cli.relTypeGet(rel)\n',
        "self.clm.getAllConcepts('Tryckeri')'\n",
        "self.clm.getAllConcepts('Tryckeri'\n",
        "self.clm.getAllConcepts('Tryckeri')\n",
        "self.clm.getAllConcepts('')\n",
        "self.clm.getLidsByLabel('ratt')\n",
        "self.clm.getLidsByLabel('skola')\n",
        "self.clm.getLidsByLabel('h\xc3\xb6na')\n",
        "self.clm.getLidsByLabel('h\xc3\xa4st')\n",
        "self.clm.getAllConcepts('h\xc3\xa4st')\n",
        "self.clm.getLidsByLabel('Tryckeri')\n",
        "self.elm_in.query('FROM \n",
        ')\n',
        'lst[:10]\n',
        "' '.join(q)\n",
        'lst[:20]\n',
        "self.labels['Allmogestol']\n",
        'len(lst)\n',
        'len(self.labels.keys())\n',
        "lst['monolog']\n",
        'lst.keys()\n',
        'lst.keys() and self.\n',
        'self.labels[k]\n',
        'q\n',
        'len(params)\n',
        'self.labels.keys()\n',
        "self.labels['OCM 344']\n",
        "self.labels['OCM']\n",
        "self.labels['ocm']\n",
        "self.labels['ocm 344']\n",
        'sql\n'],
                                   u'file:/Users/jaclu/proj/europeana/rhine_cms/rhine_cms/manage.py': [''\
        'os.path.basename(__FILE__)\n',
        'os.path.basename(__file__)\n',
        'os.path.dirname(__file__)\n',
        'fname\n',
        'p.content\n',
        'len(p.content)\n',
        "'%s={% trans=\"%s\" %}\\n' % (p.key, p.content)\n",
        "'%s={% trans=\"hej\" %}\\n' % p.key\n",
        "'%s={%% trans=\"hej\" %%}\\n' % p.key\n",
        'func\n',
        'datetime.now()\n',
        'datetime.\n',
        'a\n',
        'len(a)\n',
        "PortalProperties.objects.filter(tag='sddffdfddf')\n",
        'print self._errors\n',
        "u'%s={%% trans=\"%u\" %%}\\n' % (p.tag, p.trans_key)\n",
        "u'%s={%% trans=\"%s\" %%}\\n' % (p.tag, p.trans_key)\n",
        'p.tag\n',
        'f.encoding\n',
        "f.encoding='utf-8'\n"],
                                   u'file:/Users/jaclu/proj/europeana/trunk/tools/utils/thumb_checker.py': [''\
        'os.path.isdir(ddir)\n',
        't0 + INTERVALL_REPORT\n',
        'time.time()\n',
        't0 + INTERVALL_REPORT < time.time()\n',
        " eta.split(':')\n",
        "eta.split(':')\n",
        'len(keys)\n',
        'param\n',
        "all_providers['007']\n",
        "all_providers['007']['00746']\n",
        'col.get_thread().isAlive\n',
        'col.get_thread().isAlive()\n',
        'col.get_thread()\n',
        's\n',
        "s='01906'\n",
        "s='04702'\n",
        'threading.activeCount()\n',
        'len(self.running_threads)\n'],
                                   u'file:/Users/jaclu/proj/kmm/hmweb/djangeri/manage.py': [''\
        'os.path.normpath(proj_base)\n',
        "os.path.normpath(proj_root + '/..)\n",
        "os.path.normpath(proj_root + '/..')\n",
        'os.name\n',
        'os.system\n',
        'os.system()\n',
        'os.sys()\n',
        'os.sys\n',
        'os.uname()\n',
        'os.uname()[0]\n',
        'dipatcher\n',
        'dspatcher\n',
        'dispatcher\n',
        'dir(dispatcher)\n',
        'proj_root\n',
        'proj_base\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/descriptions.py': [''\
        'line\n',
        'descriptions\n',
        'lst[0]\n',
        'lst[1]\n',
        'print line\n',
        'unicode(line)\n',
        "unicode(line,'utf-8')\n",
        'gid\n',
        'k\n',
        'fh.encoding\n',
        "fh.encoding='utf8'\n",
        'u[:139]\n',
        "fh,write('d')\n",
        "fh.write('d')\n",
        "fh.write('\\xe6')\n",
        "fh.write(u'\\xe6')\n",
        "fh.write(u'\\xe6'.decode())\n",
        "fh.write(u'\\xe6'.decode('ascii'))\n",
        "fh.write(u'\\xe6'.decode('utf-8'))\n",
        'fh.write(u)\n',
        'fh.write(toS(u))\n',
        'txts[k]\n',
        'u\n',
        'toS(u)\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/djsams/manage.py': [""\
        "individ.get('levnad','')\n",
        "user,password=''\n",
        "user,password='',''\n",
        "jid=jid_pw=''\n",
        'print jid\n',
        'request.user\n',
        'print request.user\n',
        'a=[1,2,3]\n',
        'b=[5,6,7]\n',
        'a+b\n',
        'alt_labels[0]\n',
        'alt_labels[1]\n',
        'alt_label\n',
        "search=''\n",
        "patterns((r'^sams/', include('apps.sams.urls')))\n",
        "patterns('',(r'^sams/', include('apps.sams.urls')))\n",
        'for u in urlpatterns:\n',
        ' print u\n',
        'urlpatterns.count\n',
        'print len(urlpatterns)\n',
        'urlpatterns[0]\n',
        'urlpatterns[1]\n',
        'urlpatterns[2]\n',
        'urlpatterns[3]\n',
        'urlpatterns[4]\n',
        'urlpatterns[5]\n',
        'urlpatterns\n',
        "text=u'gfdfgfd'\n",
        'proj_root\n',
        'age\n',
        'time.time() + EXPUNGE_TIME\n',
        'time.time() + EXPUNGE_TIME - age\n',
        'age < time.time() + EXPUNGE_TIME\n',
        'age < time.time() + 1\n',
        'age + 500 < time.time() \n',
        'age + 5 < time.time() \n',
        'age + 5 > time.time() \n',
        'age + 500 > time.time() \n',
        '(not res) or not (age > (time.time() + EXPUNGE_TIME))\n',
        '(not res) or not (age > (time.time() + 400))\n',
        '(not res) or not (age > (time.time() + 1))\n',
        '(not res) or not (age > (time.time() + 33333))\n',
        '(not res) or (not (age > (time.time() + 33333)))\n',
        '(not res) or (not (age < (time.time() + 33333)))\n',
        '(not res) or (not (age < (time.time() + 3)))\n',
        'age < time.time() + 3\n',
        'age < time.time() + 300\n',
        'age < time.time() + 3000\n',
        'age  + 3000 < time.time()\n',
        'age  + 3 < time.time()\n',
        '(not res) or age  + 3 < time.time()\n',
        '(not res) or (age  + 3 < time.time())\n',
        '(not res) or (age  + 33333 < time.time())\n',
        'self.drop_down_cache\n',
        'self.drop_down_cache.keys()\n',
        'self.drop_down_cache[skola]\n',
        "self.drop_down_cache['skola']\n",
        "self.drop_down_cache['skola'][1]\n",
        "self.drop_down_cache['skola'][1] - time.time()\n",
        'lst[:10]\n',
        'concepts[1]\n',
        'concepts[0]\n',
        'concepts[:10]\n',
        'sql\n',
        'self._db.query(q)\n',
        'self._db.queryList(q)\n',
        'labels.join()\n',
        "labels.join(',')\n",
        'labels\n',
        "','.join(labels)\n",
        "', '.join(labels)\n",
        'lst1\n',
        "request.POST.get('narrower','0')\n",
        "request.POST.get('narrower')\n",
        "request.POST.get('narrower','23')\n",
        "request.POST.get('narrower','ere')\n",
        "request.POST.get('narrowesr','ere')\n",
        "int('22'\n",
        ')\n',
        "int('22',2)\n",
        "clm._cli.getConcept('279')\n",
        'clm._cli.getConcept(279)\n',
        "request.POST.pop('lid')\n",
        'request.POST\n',
        'lid and concept\n',
        'lid and (concept not None)\n',
        'lid and (concept != None)\n',
        'lid and (concept != {})\n',
        'not lid and (concept != {})\n',
        'not lid and (concept == {})\n',
        'lid or (concept == {})\n',
        '(not lid) and (concept != {})\n',
        'concept != {}\n',
        '(not lid) or (concept != {})\n',
        '(not lid) or (concept == {})\n',
        'request.REQUEST\n',
        'print request.REQUEST\n',
        'request.REQUEST.\n',
        'request.REQUEST.dicts\n',
        'res\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/mfd/check_mfd.py': [''\
        'self.trc_servers[jid][SRV_ONLINE]\n',
        'SRV_ONLINE\n',
        'print resp\n',
        'self.options.xmpp_server\n',
        "self.options.xmpp_server = 'njord.ablm.se'\n",
        'os.getcwd()\n',
        'import os\n',
        'os.getcwdu()\n',
        'jid or new_auth[0]\n',
        'import string\n',
        'string.ascii_lowercase\n',
        'random.choice(string.ascii_lowercase)\n',
        'random.choice(string.ascii_lowercase)*10\n',
        'range(12)\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/mfd/classmaster.py': [''\
        'aa\n',
        'r[0]\n',
        'rslt[r[0]]\n',
        'wid\n',
        'resp\n',
        'a\n',
        'broader_lst\n',
        'narrover_lst\n',
        'concept[0]\n',
        "concept[0].split('-')[1:]\n",
        "'-'.join(concept[0].split('-')[1:])\n",
        'concept\n',
        'i=143\n',
        'i=543\n',
        'i/100\n',
        'self._ocm_lids\n',
        'self._ocm_lids.keys()\n',
        'i=5028\n',
        'i/1000*1000\n',
        'i/10*10\n',
        'i/100*100\n',
        'i/10\n',
        'print resp\n',
        '_R.API_VERS\n',
        'mfd_class\n',
        'args\n',
        'args.pop(0)\n',
        "args.pop(0,'')\n",
        'args.remove(0)\n',
        'cmd\n',
        'lst\n',
        'print lst\n',
        'print lst[0]\n',
        'print stanza\n',
        'print param\n',
        'dct\n',
        "dct[[1,'ratt']]=2\n",
        "dct[(1,'ratt')]=2\n",
        'print result\n',
        'sset\n',
        'p\n',
        'broader\n',
        't\n',
        'param\n',
        'print n\n',
        "u'[%s] %s' % lbl\n",
        "u'[%s] %s' % (lbl)\n",
        "u'[%s] %s' % *lbl\n",
        "u'[%s] %s' % (*lbl)\n",
        "u'[%i] %s' % (*lbl)\n",
        "u'[%s] %s' % (lbl[0], lbl[1])\n",
        'lbl\n',
        'lbl[0]=45L\n',
        "u'[%i] %s' % (lbl[0], lbl[1])\n",
        "self.api_calls['getConcept'](5)\n",
        "self.api_calls['getConcept'](self,5)\n",
        'jid.__str__()\n',
        'jid\n',
        'jid.getNode()\n',
        'dir(self._cm)\n',
        'r\n',
        'func.__name__\n',
        'self.__class__\n',
        'self.__class__.__str__\n',
        'self.__class__.__str__()\n',
        'XmppServer2.__repr__()\n',
        'XmppServer2.__repr__(self)\n',
        'self.__class__.__repr__()\n',
        'self.__str__()\n',
        'self.__repr__()\n',
        'self._api_calls[func]\n',
        'super().__get__item(name)\n',
        'super()\n',
        'super(ClassMaster)\n',
        'super(ClassMaster,self)\n',
        'print iq\n',
        "kwargs={'aaa':23}\n",
        "kwargs={'aaa':u'en'}\n",
        "kwargs={u'aaa':23}\n",
        'self.trs_name_space[ns]\n',
        'action\n',
        'self._action\n',
        'self.trs_ns_handlers[ns]\n',
        'lst[0]\n',
        'lst[1]\n',
        'len(lst)\n',
        'self._top_lids\n',
        'inst.value\n',
        "inst.__getattribute__('value')\n",
        "inst.__getattribute__('values')\n",
        "inst.__getattribute__('sune','dd')\n",
        "inst.__getattribute__('sune')\n",
        'inst.sune\n',
        '_appErrs[appError]\n',
        'appError\n',
        'err_msg\n',
        'res\n',
        'len(parts)\n',
        'part[1]\n',
        'parts[1]\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/mfd/clm_importer_ablm.py': [''\
        'self\n',
        'dir(self)\n',
        'dir(self.db)\n',
        'dir(self._db)\n',
        'key\n',
        'key[:9]\n',
        'key[:8]\n',
        'key[9:]\n',
        'key[8:]\n',
        "'setTerm_' + key[8:]\n",
        "'self.setTerm_' + key[8:]\n"],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/mfd/cm_standalone.py': [''\
        '[3:]\n',
        '[1:]\n',
        'l[1:]\n',
        'l[3:]\n',
        "lang=''\n",
        'l\n',
        "None == ''\n",
        'p[_C.BROADER]\n',
        "','.join(p[_C.BROADER])\n",
        "'.'.join(','.join(p[_C.BROADER]))\n",
        "guid='243'\n",
        'lbl\n',
        'lbl[0]\n',
        "self._getAllLabels('6', lang)\n",
        "self._getAllLabels('6', '')\n",
        "self._getAllLabels('6', 'sv')\n",
        'self._prepareLabels(guid, lang)\n',
        "self._prepareLabels(guid, 'se')\n",
        "self._prepareLabels(guid, 'sv')\n",
        "self._prepareLabels(guid, '')\n",
        "self._prepareLabels(guid, 'sdf')\n",
        'q\n',
        "' '.join(q)\n",
        'len rows(0)\n',
        'rows\n',
        'len(rows)\n',
        'rows[0]\n',
        'len(rows[0])\n',
        'lang_ok\n',
        'lang_ok or DEF_LANG\n',
        'sql\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/mfd/cm_test.py': [''\
        'guif\n',
        "guid=''\n",
        'int(False)\n',
        'int(True)\n',
        'broader[:2]\n',
        'a = [1,2,3]\n',
        'b = [4,5]\n',
        'a + b\n',
        'rslt\n',
        'lbl\n',
        'guid\n',
        "guid='5643'\n",
        "lang='er'\n",
        "lang='en'\n",
        "lang=''\n",
        'q\n',
        "lbl=''\n",
        'lang and isinstance(lang, basestring)\n',
        'isinstance(lang, basestring)\n',
        'sql\n',
        'print sql\n',
        'print query\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/mfd/dummy_thing.py': [''\
        'print a\n',
        "jid=''\n",
        "jid_pw=''\n",
        "kwargs.get('server')\n",
        "kwargs.get('server',23)\n",
        "kwargs.get('servesr',23)\n",
        "kwargs.pop('seerver',23)\n",
        "kwargs.pop('server',23)\n",
        'kwargs\n',
        'print err_stanza\n',
        'iq\n',
        'print iq\n',
        'iq.getNamespace()\n',
        'iq.getQueryNS()\n',
        'wc\n',
        'self.trs_ns_handlers\n',
        'self.__class__.__class__\n',
        'print self.__class__.__repr__\n',
        'print self.__class__.__repr__()\n',
        'print self.__repr__()\n',
        'print self.__str__()\n',
        'print self.__class__\n',
        "print self.__class__.split(')\n",
        "print self.__class__.__str__().split(')\n",
        'print self.__class__.__str__()\n',
        'self.__class__.__str__()\n',
        'self.__class__.__str__\n',
        'self.__class__\n',
        'a = self.__class__\n',
        'a\n',
        'a = self.__class__.__str__()\n',
        'print self.__class__.__name__\n',
        'msg\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/name_searcher.py': [''\
        'len(sys.argv)\n',
        'hitcount=10\n',
        'results\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/rdb/conceptualize_ablm.py': [""\
        "term = 'plugg'\n",
        "'self._rdb._db.setTerm_%s(%s,%i)' % (terminology, term, lid)\n",
        'dir(self._db)\n',
        'self._db\n',
        'self.getOne(sql)\n',
        'type(s)\n',
        "'%s = %s' % (concept[_C.LABELS[0]], concept[_C.SCOPE_NOTE])\n",
        '(concept[_C.LABELS[0]], concept[_C.SCOPE_NOTE])\n',
        'concept[_C.LABELS[0]]\n',
        'concept\n',
        'concept[_C.SCOPE_NOTE]\n',
        'concept[_C.LABELS]\n',
        'concept[_C.LABELS][0]\n',
        'print lst\n',
        'print lst[0]\n',
        'print lst[0][1]\n',
        'lst[i]\n',
        'self._clm.getPrefLabel(perspective[0])\n',
        'dct\n',
        'dct.values()\n',
        'dct.fromkeys()\n',
        'dct.items()\n',
        'self._rdb._db\n',
        'dir(self._rdb._db)\n',
        'sql\n',
        'self._rdb._db.classMasterClear_classmaster\n',
        'self._rdb._db.classMasterClear_outline\n',
        'self._rdb._db.classMasterConceptualize_outline("548-"Organiserade l'\
        'aster"",2326)\n',
        'self._rdb._db.classMasterConceptualize_outline("548-\\"Organiserade'\
        ' laster\\"",2326)\n',
        "'self._rdb._db.classMasterConceptualize_%s(\"%s\",%i)' % (terminolo"\
        "gy, term.replace('\"','\\\"'), lid))\n",
        "'self._rdb._db.classMasterConceptualize_%s(\"%s\",%i)' % (terminolo"\
        "gy, term.replace('\"','\\\\\"'), lid)\n",
        "'self._rdb._db.classMasterConceptualize_%s(\"%s\",%i)' % (terminolo"\
        "gy, term.replace('\"','\\\"'), lid)\n",
        "term.replace('\"','\\\"')\n",
        "term.replace('\"','\\\\\"')\n",
        "term.replace('\"','\\\\\"').replace('\\\\','\\')\n",
        ')\n',
        "term.replace('\"','\\\\\"').replace('\\\\','\\\"')\n",
        "'self._rdb._db.classMasterConceptualize_%s(\"%s\",%i)' % (terminolo"\
        "gy, term., lid)\n",
        "'self._rdb._db.classMasterConceptualize_%s(\"%s\",%i)' % (terminolo"\
        "gy, term, lid)\n",
        "'self._rdb._db.classMasterConceptualize_%s(\"%s\",%i)' % (terminolo"\
        "gy, term.strip('\"'), lid)\n",
        "'self._rdb._db.classMasterConceptualize_%s(\"%s\",%i)' % (terminolo"\
        "gy, term.strip('\\\"'), lid)\n",
        "term.replace('\"','')\n",
        'tem\n',
        'rdb\n',
        'lst[0]\n',
        'lst[0][0]\n',
        "term='SVETS'\n",
        'term\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/rdb/conceptualize_elmer.py': [''\
        'rdb\n',
        'self._rdb._db\n',
        'self._rdb\n',
        'dir(self._rdb)\n',
        'sql\n',
        'self.es._connection.ses.db.escape(term)\n',
        'query\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/rdb/rdb_ablm.py': [""\
        "b = {3:'tre',4:'fyra'}\n",
        'a.\n',
        'a.items()\n',
        'a\n',
        'b\n',
        'a + b\n',
        'd[100]\n',
        'd[10]\n',
        'print r\n',
        'r.values\n',
        'r.values()\n',
        'max(r.values())\n',
        'r.items()\n',
        "self._terminologies['outline'][1]\n",
        'key\n',
        'self._terminologies[key][0]\n',
        'l\n',
        "l + ('222')\n",
        "l + ('222',)\n",
        'lst\n',
        'print lst\n',
        'lst[0]\n',
        'print lst[0]\n',
        '_R.API_VERS\n',
        'd[key][0]\n',
        'd[key]\n',
        'self._rdb._db\n',
        'self._rdb.listClassifications()\n',
        "qp=''\n",
        'q\n',
        'sql\n',
        'a = [1,2,3]\n',
        'b = [3,4,5]\n',
        'a+b\n',
        'len(lst)\n',
        'len(clm.keys())\n',
        'clm.keys()\n',
        'lst[:10]\n',
        'clm\n',
        'rdb_cli._server_item\n',
        'rdb_cli._server_item._qp_default\n',
        'print a\n',
        'print a[0]\n',
        'b[motivord]\n',
        "b['motivord']\n",
        "len(b['motivord'])\n",
        'r\n',
        'len(r)\n',
        'len(encoded)\n',
        "r['classmaster'\n",
        "'\n",
        "self._terminologies['motivord'][1]\n",
        'len(iq2)\n',
        'iq2\n',
        'print iq2\n',
        'a = str(iq2)\n',
        'len(a)\n',
        'parser.get_prog_name()\n',
        "pname.strip('.py')\n",
        "pname.strip('.pys')\n",
        "pname.strip('.yp')\n",
        "pname.split('.py')\n",
        "pname.split('.psy')\n",
        'parser.get_default_values()\n',
        's\n',
        's[:10]\n',
        's[:19]\n',
        's[:9]\n',
        's[10:]\n',
        's[9:]\n',
        'if options.servermode and options.daemonmode:\n',
        " print 'jk'\n",
        'if options.servermode and options.daemonmode\n',
        'options.servermode and options.daemonmode\n',
        'print options.servermode and options.daemonmode\n',
        'print options.servermode or options.daemonmode\n',
        'print options.servermode or options.daemonmode or options.testmode\n',
        'parser.values.runmode\n',
        'parser.values.hasattr(runmode)\n',
        'parser.values.has_attr(runmode)\n',
        'parser.values.__hasattr(runmode)\n',
        'parser.values._hasattr(runmode)\n',
        "hasattr(parser.values,'runmode')\n",
        "\"Bad testcase [%s] valid are: %s\" (value,', '.join(test_cases))\n",
        "\"Bad testcase [%s] valid are: %s\" % (value,', '.join(test_cases))"\
        "\n",
        'test_cases\n',
        'test_cases[1:]\n',
        'options.test_cases\n',
        'self.listClassifications\n',
        'self.listClassifications()\n',
        'rdb_cli\n',
        'rdb_cli.info()\n',
        'cls_dst\n',
        'self._qp.keys()\n',
        'print QPsamsok1_0\n',
        'print QPsamsok1_2\t\n',
        'print QPharvester1_0Ablm\n',
        'print stanza\n',
        "ret['data'][0]\n",
        "item['MOTIV']\n"],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/rdb/rdb_elm_srv.py': [''\
        'self._db\n',
        'self._db.es\n',
        'self._db.es._connection\n',
        'self._db.es._connection.ses\n',
        'self._db.es._connection.ses.db\n',
        'dir(self._db.es._connection.ses.db)\n',
        'len(l(\n',
        '(\n',
        ')\n',
        'len(items)\n',
        'items\n',
        'a= [1,2,3]\n',
        'b = [3,4]\n',
        'a\n',
        'a + b\n',
        'len(l)\n',
        'print lst\n',
        'q\n',
        'outlines[term]\n',
        'term\n',
        'outlines[532]\n',
        "outlines['532']\n",
        'resp\n',
        'print resp\n',
        'r\n',
        'dir self.rdb_cli\n',
        'dir (self.rdb_cli)\n',
        'self.rd\n',
        'self.rdb\n',
        'self.rdb_cli\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/rdb/rdb_elmer.py': [''\
        'print self.help\n',
        'print result\n',
        'help_text\n',
        'text\n',
        'chunks\n',
        'r[1]\n',
        'type param_name\n',
        'type (param_name)\n',
        'for s in sys.path:\n',
        ' print s\n',
        'param.db_host\n',
        'local_config.db_host\n',
        "'r = %s.%s' % (CONF_FILE, param)\n",
        'err\n',
        'name\n',
        'code\n',
        'cond\n',
        'print jid\n',
        'self.log_dest\n',
        'self._log_dest\n',
        'print iq\n',
        'print resp\n',
        "transp.send('<iq/>')\n",
        "transp.send('<iq></iq>')\n",
        "transp.send('<iq></iq2>')\n"],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/rdb/rdb_harvester.py': [''\
        'fh2.next()\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/rdb/rdb_monitor.py': [""\
        "options.ensure_value('server')\n",
        "options.ensure_value('server','2')\n",
        "options.ensure_value('server','')\n",
        'print jid\n',
        'print jid.getDomain()\n',
        'options.xmpp_server\n',
        'options.verbose\n',
        'print ret\n',
        '_Q.DESCRIPTION\n',
        'print options\n',
        'for s in options:\n',
        'for s in options.keys():\n',
        ' print s\n',
        'options.__doc__\n',
        'options.__repr__\n',
        'options.__repr__.__getattribute__\n',
        "options.__repr__.__getattribute('verbose')\n",
        'sys.argv\n',
        'self.parser.print_usage()\n',
        'self.parser.print_help()\n',
        'print result\n',
        'self.options._get_args()\n',
        'self.parser._get_args()\n',
        'parser\n',
        'self.parser\n',
        'print self.parser\n',
        'print self.parser._get_all_options()\n',
        'print self.parser._get_all_options()[0]\n',
        'print self.parser._get_all_options()[1]\n',
        'print self.parser._get_all_options()[2]\n',
        'print self.parser._get_all_options()[3]\n',
        'self.parser._get_all_options()[3].value)=\n',
        'self.parser._get_all_options()[3].value()\n',
        'self.parser._get_all_options()[3]\n',
        'self.parser._get_all_options()[3].default\n',
        'self.parser._get_all_options()[3].default()\n',
        'dir(self.parser._get_all_options()[3])\n',
        'self.parser._get_all_options()[3].ATTRS\n',
        'self.parser._get_all_options()[3].dest\n',
        'self.parser._get_all_options()[3].metavar\n',
        'self.parser._get_all_options()[3].nargs\n',
        'dir(options)\n',
        'dir(self.options).query_field\n',
        'self.options.query_field()\n',
        'dir(self.options)\n',
        'self.options.ensure_value()\n',
        'self.options.ensure_value\n',
        'self.options.query_field\n',
        'self.options\n',
        'print self.options\n',
        'self.options.__repr__\n',
        'self.options.__str__\n',
        'self.options.__repr__()\n',
        'self.options.__str__()\n',
        'dict(d)\n',
        'd.dict()\n',
        'd2.values(d)\n',
        'd\n',
        'd[2:-2]\n',
        'd[1:-1]\n',
        "d_s.split(',')\n",
        'pair.split()\n',
        "pair.split(':')\n",
        'not (1 and 0)\n',
        'not (0 and 0)\n',
        'not (0 or 1)\n',
        'not (1 or 0)\n',
        'not (1 or 1)\n',
        'not (0 or 0)\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/rdb/rdb_skara.py': [''\
        'sql\n',
        'query\n',
        "query['description']\n",
        "query['description'].split('/')\n",
        'self.__con._auth_err\n',
        'parser.values\n',
        "parser.values.runmode = 'start'\n",
        'args\n',
        "args.pop('start')\n",
        "args = ['start','dfsfdg']\n",
        "args.remove('start')\n",
        'pidfile\n',
        'self\n',
        'self.pidfile\n',
        'result\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/rdb/rdb_tekmus.py': [''\
        'item_id\n',
        "item_id='TM12705'\n",
        'q\n',
        'items.sort()\n',
        'hc\n',
        'item[:10\n',
        ']\n',
        'items[:10]\n',
        'items\n',
        'res[2][1][2]\n',
        'len(items)\n',
        'sql\n',
        'self._monitorNsHandler\n',
        'samsok.utils.config\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/rdb/rdb_test_cli.py': [''\
        '_Q.DESCRIPTION\n',
        '_opt in dir(cfg)\n',
        'result\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/examples/rdb/rdb_ylm_etno.py': [''\
        'q[0]\n',
        'q[-1]\n',
        'chr(34)\n',
        'print q[-1]\n',
        'print q[-2]\n',
        'print q[-2:]\n',
        'print ret\n',
        "for a,b in ( ('rubrik1','ss'),('rubrik2','ss'))\n",
        "'%s %s' for a,b in ( ('rubrik1','ss'),('rubrik2','ss'))\n",
        "'%s %s' % (a,b) for a,b in ( ('rubrik1','ss'),('rubrik2','ss'))\n",
        "('%s %s' % (a,b)) for a,b in ( ('rubrik1','ss'),('rubrik2','ss'))\n",
        "('%s %s' % (a,b)) for a,b,c,d in ( ('rubrik1','ss',3,4),('rubrik2',"\
        "'ss',5,6))\n",
        "q='hepp'\n",
        "[('%s %s' % (a,b)) for a,b,c,d in ( ('rubrik1',q,3,4),('rubrik2','s"\
        "s',5,6))]\n",
        "[('%s %s' % (a,b)) for a,b,c,d in ( ('rubrik1',q,3,4),('rubrik2',q,"\
        "5,6))]\n",
        "[('%s %s' % (a,b)) for a,b,c,d in ( ('rubrik1','ss',3,4),('rubrik2'"\
        ",'ss',5,6))]\n",
        "[('%s %s' % (a,q)) for a,b,c,d in ( ('rubrik1','ss',3,4),('rubrik2'"\
        ",'ss',5,6))]\n",
        'a\n',
        'q\n',
        'sql\n'],
                                   u'file:/Users/jaclu/proj/kmm/samsok/samsok/mfd/csv_importer.py': [''\
        'len(sys.argv)\n',
        'sys.argv\n',
        'r[0]\n',
        's\n',
        'r\n',
        'broaders\n',
        'broaders[0]\n',
        'broaders[0][0]\n',
        'broaders[0][0][0]\n',
        'len(a[0])\n',
        'a[0][0]\n',
        'a[0][0][0]\n',
        'a[0][0][0][0]\n',
        'a[0][0][0][1]\n',
        'len(a)\n',
        'a[1]\n',
        'a[0]\n',
        'boader\n',
        'boader[1]\n',
        'boader[0]\n',
        'broader\n',
        'persp1[1]\n',
        'persp1[\n',
        "persp1'\n",
        ']\n',
        'persp1\n',
        'persp1[0]\n',
        'rslt[r[0]]\n',
        'sql\n',
        "u_lbl in cpt['labels']\n",
        "u_lbl.lower() in cpt['labels'].lower()\n",
        "a=['ETT','TVP']\n",
        'a.lower()\n',
        "'ett' in ' '.join(a).lower()\n",
        "'tvp' in ' '.join(a).lower()\n",
        'a\n',
        "'et' in ' '.join(a).lower()\n",
        "'et' in a\n",
        "'ET' in a\n",
        "'ETT' in a\n",
        "' '.join(a).lower()\n",
        "' '.join(a).lower().split(' ')\n"],
                                   u'file:/Users/jaclu/proj/kmm/samsok/setup.py': [""\
        "'0.2.6-35beta' < '0.3'\n",
        "'0.2.6-35beta' >= '0.3'\n",
        "'0.2.6-35beta' >= '0.2'\n",
        "'0.2.6-35beta' >= '0.2.7'\n",
        "'0.2.6-35beta' >= '0.2.6-36'\n",
        "'0.2.6-35beta' >= '0.2.6-35'\n",
        'samsok._version\n',
        "samsok._version >= '0.2.6-35'\n",
        "samsok._version >= '0.2.6-36'\n"],
                                   u'file:/Users/jaclu/proj/kmm/samsok/untitled-1.py': [''\
        'rt\n',
        'rdflib\n',
        'len(rdflib)\n',
        'rdflib.keys()\n',
        'rdflib.join()\n',
        "rdflib.join(',')\n",
        "rdflib.join['name']\n",
        "rdflib['name']\n",
        "rdflib['pic:1']\n",
        'len(g)\n',
        'print drew\n',
        'foaf=Namespace("http://xmlns.com/foaf/0.1/")\n',
        'Namespace("http://xmlns.com/foaf/0.1/")\n',
        'print Namespace("http://xmlns.com/foaf/0.1/")\n',
        'dict(Namespace("http://xmlns.com/foaf/0.1/"))\n',
        'dict(foaf=Namespace("http://xmlns.com/foaf/0.1/"))\n',
        'a = dict(foaf=Namespace("http://xmlns.com/foaf/0.1/"))\n',
        "URIRef('http://bigasterisk.com/foaf.rdf#drewp')\n",
        "print URIRef('http://bigasterisk.com/foaf.rdf#drewp')\n",
        "b= URIRef('http://bigasterisk.com/foaf.rdf#drewp')\n"],
                                   u'file:/Users/jaclu/proj/samsok/djsams/manage.py': [''\
        'info[_R.INF_DATA_ENCODING]\n',
        'string[:100]\n',
        'item_id\n',
        'result\n'],
                                   u'file:/Users/jaclu/proj/samsok/examples/rdb/edl_cli.py': [''\
        'len(result)\n',
        'len(items)\n',
        'items\n'],
                                   u'file:/Users/jaclu/proj/samsok/examples/rdb/rdb_ablm.py': [''\
        'info[_R.INF_DATA_ENCODING]\n',
        'item_id\n',
        "' '.join(sql)\n",
        'print q\n',
        'print toS(q)\n',
        'node\n',
        'print xml\n',
        'self._xmlSubNodes(self.__dom, _C.WDOC)\n',
        'print note\n',
        'print node\n',
        'print self.__dom\n',
        'self._qp.keys()\n',
        'self.items[:10]\n',
        'len(items)\n',
        'a\n',
        'query_parsers[0]\n',
        'query_parsers[0].qpName\n',
        'a[0][2][1]\n',
        'print b[2]\n',
        'sql\n',
        'rec_wrp.toprettyxml()\n',
        'par_node.toprettyxml()\n',
        'node.toprettyxml()\n',
        's\n',
        'self._fullName(parrent.localName)\n',
        'expected_name\n',
        'self._fullName(node.localName)\n',
        '_C.REC_W\n',
        'print node.toprettyxml()\n',
        'print self.__dom.toprettyxml()\n',
        'info[_R.INF_ITEMURL]\n',
        'item.toXml()\n',
        'print item.toXml()\n',
        'info\n',
        'print item.__dom.toprettyxml()\n',
        'print toS(item.__dom.toprettyxml()=\n',
        ')\n',
        'print toS(item.__dom.toprettyxml())\n',
        'time.strftime()\n',
        'time.asctime()\n',
        'rdb_cli.itemList(offset=0, hits=200,server=self.server_current)[0]\n',
        'args[0]\n',
        "db_item['MOTIV']\n",
        'r\n',
        'print db_item\n',
        'print md.__dom.toprettyxml()\n',
        'print toS(md.__dom.toprettyxml())\n',
        'Q\n',
        'q\n',
        "item_id='AN-10717'\n",
        'query\n'],
                                   u'file:/Users/jaclu/proj/samsok/examples/rdb/rdb_elm_srv.py': [''\
        'print toS(md.fromXml())\n',
        'md.fromXml()\n',
        'md.getNode()\n',
        'md.getNode().toxml()\n',
        'print md.getNode().toxml()\n',
        'print md.getNode().toprettyxml()\n',
        'self._info()\n',
        'md.getNode().toprettyxml()\n',
        'self.buflist[0]\n',
        'self.buflist[1]\n',
        'self.buflist[2]\n',
        'self.buflist[3]\n',
        'self.buflist[4]\n',
        'self.buflist[5]\n',
        'self.buflist[6]\n',
        'self.buflist[7]\n',
        'self.buflist[8]\n',
        'self.buflist\n',
        'self.buflist[:20\n',
        ']\n',
        'print self.buflist[:20]\n',
        "print ''.join(self.buflist[:20])\n",
        "print ''.join(self.buflist[:24])\n",
        "print ''.join(self.buflist[:28])\n",
        "print ''.join(self.buflist[:33])\n",
        "print ''.join(self.buflist[:40])\n",
        "print ''.join(self.buflist[:60])\n",
        "print ''.join(self.buflist[:50])\n",
        "print ''.join(self.buflist[:45])\n",
        "print ''.join(self.buflist[:43])\n",
        "print ''.join(self.buflist[:44])\n",
        'print self.buflist[44]\n',
        'self.buflist[44]\n',
        'a=self.buflist[44]\n',
        'n\n',
        'print toS(n)\n',
        'print toS(n.toprettyxml())\n',
        "identitet[k1][k2]['param']\n",
        'identitet[k1][k2]\n',
        '[k2]\n',
        "db_item['item_type']\n",
        "toU(db_item['item_type'])\n",
        'type(what)\n',
        'import datetime\n',
        'datetime.datetime\n',
        'type(datetime.datetime)\n',
        'type(datetime.datetime())\n',
        'print result\n',
        "k2['param']\n",
        "toU(k2['param'])\n",
        "str(k2['param'])\n",
        "str(u'p\xc3\xb6lsa')\n",
        "toU(str(u'p\xc3\xb6lsa'))\n",
        'ustr\n',
        "u'%u'%u'p\xc3\xb6lsa'\n",
        "u'%s'%u'p\xc3\xb6lsa'\n",
        "u'p\xc3\xb6lsa'\n",
        "self._db_item[main_key][key]['param']\n",
        'self._db_item[main_key][key]\n',
        'self._db_item[main_key][key][0]\n',
        'type(param)\n',
        'len(self.items)\n',
        'md.__dom.toprettyxml(\n',
        ')\n',
        'print md.__dom.toprettyxml()\n',
        "k1.lower().replace('\xc3\xa5','a').replace('\xc3\xa4','a').replace("\
        "'\xc3\xb6', 'o')\n",
        'print k1\n',
        "print k1.lower().replace('\xc3\xa5','a').replace('\xc3\xa4','a').re"\
        "place('\xc3\xb6', 'o')\n",
        'k1\n',
        "print toS(k1).lower().replace('\xc3\xa5','a').replace('\xc3\xa4','a"\
        "').replace('\xc3\xb6', 'o')\n",
        "k1.lower().replace(u'\xc3\xa5','a').replace(u'\xc3\xa4','a').replac"\
        "e(u'\xc3\xb6', 'o')\n"],
                                   u'file:/Users/jaclu/proj/samsok/examples/rdb/rdb_harvester.py': [''\
        'len(item_ids)\n',
        "'sdff'.split()\n",
        "list('sdff')\n",
        'list(str(self.tmp_dir))\n',
        'tupple(str(self.tmp_dir))\n',
        '*tuple(str(self.tmp_dir))\n',
        'tuple(str(self.tmp_dir))\n',
        "os.path.join(['e','5'])\n",
        "os.path.join('e','5')\n",
        'a=[1,2,3]\n',
        '*a\n',
        'a\n',
        'tuple(a)\n',
        'b=tuple(a)\n',
        '*b\n',
        'b\n',
        'os.path.j\n',
        "a=('4','gf','gfd')\n",
        'os.path.join(a)\n',
        "a=['1','2','3']\n",
        'os.path.join(*a)\n',
        'os.curdir()\n',
        'os.curdir\n',
        'os.getcwd()\n',
        'self.tmp_dir\n',
        'self.tmp_dir=4534\n',
        's\n',
        'self.item_count / self.hc\n',
        'self.item_count / float(self.hc)\n',
        'time_elapsed\n',
        'e=self.item_count / float(self.hc)\n',
        'time_elapsed/e\n',
        'time_elapsed/e - time_elapsed\n',
        'eta\n',
        'int(eta)\n',
        'self.item_count \n',
        'self.time_progress\n',
        'time.time()\n',
        'result[2] or result[1]\n',
        'self.item_count/float(self.hc)\n',
        'self.item_count/float(self.hc)*100\n',
        'print percent\n',
        "print '%f' % percent\n",
        "print '%.2f' % percent\n",
        "print '%.1f' % percent\n",
        'print xml\n',
        'print toS(xml)\n',
        'self.hc\n',
        'rdb_cli.itemList(offset=offset, hits=200,server=self.server_current'\
        ')[0]\n',
        'rdb_cli.itemList(offset=0, hits=200,server=self.server_current)[0]\n',
        'item_ids\n',
        'result\n',
        'path\n',
        'l\n',
        "l + ['1','3']\n",
        "k1.lower().replace(u'\xc3\xa5','a').replace(u'\xc3\xa4','a').replac"\
        "e(u'\xc3\xb6', 'o')\n",
        'item_id\n',
        'file_name\n',
        'cfg.servers\n',
        "dir('sol')\n",
        "dir('solf')\n",
        'opt\n',
        'cfg.harv_servers\n',
        'dir(cfg)\n',
        'opt in dir(cfg)\n'],
                                   u'file:/Users/jaclu/proj/samsok/examples/rdb/rdb_skara.py': [""\
        "a.replace('.jpg','')\n",
        "a.lower().replace('.jpg','')\n",
        'href[:-4]\n',
        'href[:-8]\n',
        'self.path\n',
        'self._path\n',
        "href.lower().find('jpg.jpg') \n",
        'l[0]\n',
        'l[1]\n',
        'l[:10]\n',
        'len(l)\n',
        'href[:19]\n',
        'href[:19-1]\n',
        "href = 'dfdgdfdf.JPG.jpg'\n",
        "href.lower().find('jpg')\n",
        'href[:9-1]\n',
        'tail_cut\n',
        "href.split('.')[0]\n",
        "href.split('dd')[0].split('%20')[0]\n",
        "href.split('.')[0].split('%20')[0]\n",
        'len(thumbs_new)\n',
        'thumbs_new.keys()\n',
        "thumbs_new['1M16.B145064:14']\n",
        'self._must_exist\n',
        'href in self._must_exist\n',
        'time.time() - t_start\n',
        "print 'hej %f' % time.time() - t_start\n",
        "print 'hej %f' % (time.time() - t_start)\n",
        "print 'hej %i' % (time.time() - t_start)\n",
        'leftovers\n',
        "self._fgid_all[fgid].split('/')[:-1]\n",
        "self._fgid_all[fgid].split('/')[1:-1].join('/')\n",
        "self._fgid_all[fgid].split('/')[1:-1]\n",
        "'/'.join(self._fgid_all[fgid].split('/')[1:-1])\n",
        'parser.get_sub_dirs()\n',
        'parser.get_sub_dirs().sort()\n',
        'a.sort(-1)\n',
        'a.reverse()\n',
        'a=parser.get_sub_dirs()\n',
        'a.sort()\n',
        'lst.sort()\n',
        'lst.reverse()\n',
        'lst\n',
        'href\n',
        'self._url\n',
        'url\n',
        "'abc' - 'ab'\n",
        "'abc'.split('ab')\n",
        "'abc'.split('ab')[1]\n",
        "'abcjkl dkljf df.split('ab')[1]\n",
        "'abcjkl dkljf df'.split('ab')[1]\n",
        "'ab'.split('ab')[1]\n",
        'self._entry_point\n',
        "('ss','ee').find('ee')\n",
        "'ee' in ('ss','ee')\n",
        "u='sdfdfd'\n",
        'self._fgid_all[fgid]\n',
        "self._fgid_all[fgid].split('/')\n",
        "self._fgid_all[fgid].split('/')[-1]\n",
        "'/'.join(self._fgid_all[fgid].split('/')[:-1])\n",
        'l\n',
        'os.path.split(self._fgid_all[fgid])\n',
        'fg\n',
        'fgid\n',
        ' \t1M16.B145046:1948:1\n',
        'a\n',
        'a[2]\n',
        'a[0]\n',
        'a[0][2]\n',
        'a[0][2][1]\n',
        'items\n',
        'sql\n',
        "db_item['Bildtext']\n",
        "db_item['Bildtext'].replace('\\n\\n','\\n')\n",
        'print result[0][2]\n',
        "db_item['thumb'].split('/')\n",
        "db_item['thumb'].split('/')[-1]\n",
        "db_item['Realnr']\n",
        'md.__dom.toprettyxml()\n',
        'toS(md.__dom.toprettyxml())\n',
        'print toS(md.__dom.toprettyxml())\n',
        "db_item['thumb']\n",
        'fname\n',
        'fname[1:]\n',
        "self._new_thumbs['1M16.A78746']\n",
        "self._new_thumbs['1M16.A78746'].split('/_')\n",
        "self._new_thumbs['1M16.A78746'].split('/-')\n",
        "self._new_thumbs['1M16.A78746'].split('/-')[1]\n",
        "self._new_thumbs['1M16.A78746'].split('/-')[-1]\n",
        'lst[:10]\n',
        'db_item[0][0]\n',
        'db_item[0]\n',
        'print xml\n',
        'print md.__dom.toprettyxml()\n',
        'print self.__dom.toprettyxml()\n',
        'print toS(self.__dom.toprettyxml())\n',
        'db_item\n',
        "db_item['Anmerkning']\n",
        "print db_item['Anmerkning']\n",
        "print toS(db_item['Anmerkning'])\n"],
                                   u'file:/Users/jaclu/proj/samsok/examples/rdb/rdb_sof_pre7.py': [""\
        "('%s hepp' % q)\n",
        "('%s hepp' % q).replace('%%','%')\n",
        "('%%%s' % q).replace('%%','%')\n",
        "('%%%s' % q)\n"],
                                   u'file:/Users/jaclu/proj/samsok/examples/rdb/rdb_test_cli.py': [''\
        'print crm\n',
        'print result[2]\n'],
                                   u'file:/Users/jaclu/proj/samsok/examples/utils/crm_core_test.py': [''\
        'print self.__doc\n',
        'print self._item\n',
        'self.__doc.toprettyxml()\n',
        'print self.__doc.toprettyxml()\n'],
                                   u'file:/Users/jaclu/proj/samsok/examples/utils/museumdat_test.py': [''\
        'self._fullName(res_wrp.localName)\n',
        'title_set.localName\n',
        'self._fullName(title_set.localName)\n',
        'print node.toprettyxml()\n',
        'md[_C.WDOC]\n',
        'a=md[_C.WDOC]\n',
        'a\n',
        'a=md[_C.OBJ]\n',
        'a=md[_C.DSC_META]\n',
        'print md[_C.DSC_META][OBJ_CLS_W]\n',
        'print md[_C.DSC_META][_C.OBJ_CLS_W]\n',
        'md[_C.DSC_META][_C.OBJ_CLS_W]\n',
        'print md[_C.DSC_META]\n',
        "md[_C.DSC_META]['museumdat:objectClassificationWrap']\n",
        "md[_C.DSC_META]['museumdat:objectClassificationWrap']['museumdat:ob"\
        "jectWorkTypeWrap']\n",
        "md[_C.DSC_META]['museumdat:objectClassificationWrap']['museumdat:ob"\
        "jectWorkTypeWrap']['museumdat:objectWorkType']\n",
        "md[_C.DSC_META]['museumdat:objectClassificationWrap']['museumdat:ob"\
        "jectWorkTypeWrap']['museumdat:objectWorkType'].value\n",
        "md[_C.DSC_META]['museumdat:objectClassificationWrap']['museumdat:ob"\
        "jectWorkTypeWrap']['museumdat:objectWorkType'].content\n",
        "md[_C.DSC_META]['museumdat:objectClassificationWrap']['museumdat:ob"\
        "jectWorkTypeWrap']['museumdat:objeckk']\n",
        'md[_C.DSC_META]\n',
        'type(md[_C.DSC_META])\n',
        'isinstance(md,dict)\n',
        'md.toXml()\n',
        'print md.toXml()\n',
        'md._musdat[_C.DSC_META][_C.CLS_W]\n',
        "md._musdat[_C.DSC_META]['museumdat:objectClassificationWralp']\n",
        "md._musdat[_C.DSC_META]['museumdat:objectClassificationWrap'].keys("\
        ")\n",
        'md._musdat[_C.DSC_META]\n',
        'md._musdat[_C.DSC_META].content\n',
        'md._musdat[_C.DSC_META].keys()\n',
        "md._musdat[_C.DSC_META]['museumdat:objectClassificationWrap']\n",
        "md._musdat[_C.DSC_META]['museumdat:objectClassificationWrap']['muse"\
        "umdat:objectWorkTypeWrap']\n",
        "md._musdat[_C.DSC_META]['museumdat:objectClassificationWrap']['muse"\
        "umdat:objectWorkTypeWrap']['museumdat:objectWorkType']\n",
        "md._musdat[_C.DSC_META]['museumdat:objectClassificationWrap']['muse"\
        "umdat:objectWorkTypeWrap']['museumdat:objectWorkType'].content\n",
        "md._musdat[_C.DSC_META]['museumdat:objectClassificationWrap']['muse"\
        "umdat:objectWorkTypeWrap']['museumdat:objectWorkType'].attribs['lab"\
        "el']\n",
        "md._musdat[_C.DSC_META]['museumdat:objectClassificationWrap']['muse"\
        "umdat:objectWorkTypeWrap']['museumdat:objectWorkType'].attribs\n",
        "md._musdat[_C.DSC_META]['museumdat:objectClassificationWrap']['muse"\
        "umdat:objectWorkTypeWrap']['museumdat:objectWorkType'].attribs['imp"\
        "orted']\n",
        'md\n',
        'md._musdat.keys()\n',
        'len(md._musdat)\n',
        'md._musdat\n',
        "print md._musdat['museumdat:descriptiveMetadata']\n",
        'print md._musdat\n',
        'print md._musdat[0]\n',
        'print md._musdat[0][0]\n',
        'print md._musdat[0][0][0]\n',
        'print md._musdat[0][0][0][0]\n',
        'print toS(md._musdat[0][0][0][1])\n',
        'print toS(md._musdat[1])\n',
        'print toS(md._musdat[2])\n',
        'print toS(md._musdat[0][1])\n',
        'print toS(md._musdat[0][2])\n',
        "print toS(md._musdat['museumdat:descriptiveMetadata'])\n",
        'print toS(md._musdat[0])\n',
        'print toS(md._musdat[0][0])\n',
        'print toS(md._musdat[0][0][0])\n',
        'print toS(md._musdat[0][0][0][0])\n',
        'print toS(a)\n',
        'print toS(md._musdat)\n',
        'd\n',
        'print d\n',
        'g\n',
        'd.has_key(g)\n',
        'print toS(md._musdat.toxml())\n',
        'print toS(md._musdat[1].toxml())\n',
        'print toS(md._musdat[0].toxml())\n',
        'print toS(md._musdat[0][0].toxml())\n',
        'print toS(md._musdat[0][0][0].toxml())\n',
        'print toS(md._musdat[0][0][0][0].toxml())\n',
        'print toS(md._musdat[0][0][0][1].toxml())\n',
        'print toS(md._musdat[0][0][0][2].toxml())\n',
        'print toS(md._musdat[0][0][0][2])\n',
        'print toS(md.toXml())\n',
        'unsafe_elements\n',
        'unsafe_elements[0].toxml()\n',
        'wrp\n',
        'node\n',
        'self.__dom.toprettyxml()\n',
        'print self.__dom.toprettyxml()\n',
        'print toS(self.__dom.toprettyxml())\n',
        'child\n',
        'child.toprettyxml()\n',
        'print child.toprettyxml()\n',
        'print toS(child.toprettyxml())\n',
        'child.attributes\n',
        'print child.attributes\n',
        'child.localName\n',
        'child.nodeName\n',
        'node.toxml()\n',
        'print node.toxml()\n',
        'print toS(node.toxml())\n',
        'print toS(node.toprettyxml())\n',
        'node.childNodes\n',
        'node.nodeName\n',
        'node.nodeName==_C.WDOC\n',
        'node.attributes\n',
        'node.attributes.items\n',
        'node.attributes.item\n',
        'node.attributes.keys\n',
        'node.attributes.keys()\n'],
                                   u'file:/Users/jaclu/proj/samsok/samsok/utils/museumdat.py': [''\
        'md\n',
        'type(md(\n',
        '))\n',
        'type(md)\n',
        'type(d)\n',
        'ch.name == key\n',
        'self.musdat\n',
        "self._musdat['museumdat:museumdat']\n",
        "self._musdat['museumdat:museumdats']\n",
        'self._musdat.children\n',
        "self._musdat['museumdat:descriptiveMetadata']\n",
        "self._musdat['museumdat:descriptiveMetadata'].children\n",
        'a._musdat\n',
        "'-'.join(self.name, ','.join(lst))\n",
        "'-'.join((self.name, ','.join(lst)))\n",
        "(self.name, ','.join(lst))\n",
        "'-'.join('ww','')\n",
        "'-'.join(['ww',''])\n",
        'd.parent\n',
        'r\n',
        'd\n',
        'self._musdat\n',
        'print r\n'],
                                   u'file:/Users/jaclu/proj/utils/csv-importer.py': [''\
        'fh.next()\n',
        'len(fields[3])\n',
        "outlines['0']\n",
        'sql\n'],
                                   u'file:/Users/jaclu/proj2/samsok/djsams/manage.py': [''\
        'print resp\n',
        'info[_R.INF_ITEMURL]\n',
        's\n',
        'string[:335]\n',
        'string[:336]\n',
        'string[:337]\n',
        'xml\n',
        'print xml\n',
        'print toU(xml)\n',
        'xml[:336]\n',
        'xml[:338]\n',
        'from ustr import toS\n',
        'toS(xml)\n',
        'toS(xml_str)\n',
        'print toS(xml_str)\n',
        "ses['tot_hits']\n",
        "ses['tot_hits']=0\n",
        "ses['tot_hits']=49\n",
        'info[_R.INF_DATA_ENCODING]\n',
        'r\n',
        'info\n'],
                                   u'file:/Users/jaclu/proj2/samsok/examples/rdb/rdb_ablm.py': [""\
        "resource=''\n",
        'print jid\n',
        'print self._jid\n',
        'rdb.info()\n',
        'rdb.info().keys()\n',
        'print pl[1]\n',
        'print stanza.getQueryPayload()\n',
        'resp\n',
        'print selt._stanza\n',
        'print self._stanza\n',
        'self._stanza.getQueryPayload()\n',
        'self._stanza.getPayload()\n',
        'print self._stanza.getPayload()[0]\n',
        'print error\n',
        'print pl[0]\n',
        'print iq2.T.query\n',
        'stanza\n',
        'print info\n',
        'print info[0]\n',
        'print info[0].keys()\n',
        'stanza.getPayload()\n',
        'stanza.getPayload()[0]\n',
        'print stanza.getPayload()[1]\n',
        'stanza.getType()\n',
        'print stanza.getPayload()\n',
        'print stanza.getPayload()[0]\n',
        'print stanza.getPayload()[0].getPayload()\n',
        'q=wrapper.T.query\n',
        'q.getName()\n',
        'q.getChildren()\n',
        'q.getChildren()[0].getName()\n',
        'print query\n',
        'print pl\n',
        'print resp\n',
        'print stanza.getName()\n',
        'print stanza\n',
        'print content\n',
        'print n_params\n',
        'ai\n',
        'i\n',
        'print xml_par\n',
        'print xml_params\n',
        'print xml_params.getChildren()\n',
        'print xml_params.getChildren()[0]\n',
        'print xml_params.getChildren()[1]\n',
        'args\n',
        'a\n',
        'print iq2\n',
        'print iq\n',
        'print xml\n',
        'info[_R.INF_QP]\n'],
                                   u'file:/Users/jaclu/proj2/samsok/examples/rdb/rdb_elm.py': [''\
        'fields=[1,2,3,4]\n'],
                                   u'file:/Users/jaclu/proj2/samsok/samsok/xmpp_node.py': [''\
        'self._paramActions[t]\n',
        'self._paramActions[t](3)\n',
        'self._paramActions[t](self,3)\n',
        'print lst[0]\n',
        'print lst[n]\n',
        'print lst\n',
        'for l in lst: print l\n',
        'print nParams\n',
        'print mthd\n',
        'mthd.data\n',
        'mthd.getCDATA()\n',
        'mthd.getData()\n',
        'print nparams.getData()\n',
        'print nparams.data\n',
        'print nparams.getChildren()\n',
        'print nparams.getChildren()[0]\n',
        'print nparams[0]\n',
        'stanza.getPayload()\n',
        'stanza.getPayload()[0]\n',
        'nparams\n',
        'len(xmlParams=\n',
        'len(xmlParams)\n',
        'xmlParams\n',
        'print xmlParams\n',
        'print xmlParams.getData()\n',
        'print xmlParams.getChildren()\n',
        'print xmlPar\n',
        'print nparams\n',
        'print xml_params\n',
        'print xm\n',
        'print dct\n',
        'print item\n',
        'print xml_param.getTags()\n',
        'print xml_param.kids()\n',
        'print xml_param.kids\n',
        'print value\n',
        'print xml_par\n',
        'print xml_param.getAttrs()\n',
        "print xml_param.getAttr('name')\n",
        'print xml_param\n',
        'print xml_param.getChildren()\n',
        'print xml_param.getChildren()[0]\n',
        'if args: print 1\n',
        "toU('p\xc3\xb6lsa')\n",
        'stanza.getTag(TAG_METHOD_NAME)\n',
        'stanza\n',
        'print r\n',
        'print r[0]\n',
        'print r[1]\n',
        'ret\n',
        "print Iq('get','hepp')\n",
        'print n\n',
        'print self._stanza\n',
        'print ret\n',
        'print a\n',
        'len(stanza.getPayload())\n',
        'len(stanza.getPayload()\n',
        ')\n',
        'print stanza.getPayload()\n',
        'print stanza.getPayload()[0]\n',
        'print stanza.getPayload()[0].getName()\n',
        'print content.getData()\n',
        'print content\n',
        'print stanza\n',
        'print stanza.getTag(TAG_METHOD_NAME)\n',
        'print stanza.getTag(TAG_METHOD_NAME).getData()\n'],
                                   u'file:/Users/jaclu/tmp/urltest.py': ['le'\
        'n(r.recv)\n',
        'b.get_data()\n',
        'b.get_method()\n',
        'c = b.get_data()\n',
        'b.has_data()\n',
        'len self.urllist\n',
        'len (self.urllist)\n',
        'len(urllist)\n',
        'self.recv\n',
        'len(a)\n',
        'itm.headers.content-type\n',
        'line.split()\n',
        "line.split('wget')\n",
        "line.split('wget ')[1]\n",
        "line.split('wget ')[1].split('-O')[0]\n",
        "line.split('wget ')[1].split('-O')[0].strip()\n",
        'keys.sort()\n',
        'float(q[self.ITM_OK]) / q[self.ITM_COUNT]\n',
        'int(10000 * float(q[self.ITM_OK])/q[self.ITM_COUNT])\n',
        'int(10000 * float(q[self.ITM_OK])/q[self.ITM_COUNT])/100\n',
        'int(10000 * float(q[self.ITM_OK])/q[self.ITM_COUNT])/float(100)\n',
        '10000 * float(q[self.ITM_OK]) / q[self.ITM_COUNT] \n',
        'float(q[self.ITM_OK]) / q[self.ITM_COUNT] \n',
        '100 * float(q[self.ITM_OK]) / q[self.ITM_COUNT] \n',
        '10 / .50\n',
        "print '%2f' % perc_done\n",
        "print '%.2f' % perc_done\n",
        'time.ctime(eta)\n',
        "'%2.0i' % 4\n",
        "'%02.0i' % 4\n",
        "'%02.0i' % 23\n",
        "'%02i' % 23\n",
        "'%02i' % 3\n",
        'eta\n',
        'q[ITM_COUNT]\n',
        'q[ITM_OK]\n',
        'q[ITM_OK] / q[ITM_COUNT]\n',
        'q[ITM_OK] / float(q[ITM_COUNT])\n',
        'q[ITM_DONE]/q[ITM_BAD]\n',
        'q[ITM_DONE]/float(q[ITM_BAD])\n',
        '100*q[ITM_DONE]/float(q[ITM_BAD])\n',
        'collecions\n',
        'collecions.sort()\n',
        'self.reports[provider]\n',
        'self.reports[provider][collection]\n',
        'import urlparse\n',
        'urlparse.urlparse(url)\n',
        'a=urlparse.urlsplit(url)\n',
        'a.hostname\n',
        'a=urlparse.urlsplit(url).hostname\n',
        'urlparse.urlsplit(url).hostname\n',
        'urlparse.urlsplit(url)\n',
        'self.q_servers.sort()\n',
        'self.q_waiting.sort()\n',
        'threading.activeCount()\n',
        "itm.headers['content-type']\n",
        "itm.headers['content-type'].split()\n",
        "itm.headers['content-type'].split('/')\n",
        "itm.headers['content-type'].split('/')[0]\n",
        'content_t\n',
        'url\n',
        'itm2 = urllib2.urlopen(url)\n',
        'itm2 = urllib2.urlopen(url,timeout=2)\n',
        'e.reason\n',
        'str(e.reason)\n',
        'self.q_waiting = []\n',
        'fname\n',
        'len(self.q_waiting)\n',
        'self.q_waiting =[]\n'],
                                   u'file:/home/jaclu/proj/samsok/examples/rdb/rdb_ablm.py': [''\
        'print stanza\n',
        'print iq\n'],
                                   u'file:/home/jaclu/proj/samsok/examples/rdb/rdb_test_cli.py': [''\
        'len(self._pingers.keys())\n',
        'self._pingers.keys()\n',
        'timeout=10\n',
        'print response\n',
        'self._servers[jid][SRV_ONLINE]\n',
        'print resp\n',
        'self._parseError(resp)\n',
        'print self._parseError(resp)\n',
        "self._showLog('%s %s' % (jid, self._parseError(resp)), 1)\n"],
                                   u'file:/home/jaclu/proj/samsok/prv_ablm.py': [''\
        'raw_data.strip()\n',
        'print raw_data\n',
        'print raw_data.strip()\n',
        'self.idle_timeout\n',
        'print resp\n',
        'print self._mini_dom\n',
        'print data\n',
        'print stanza\n',
        'print node\n',
        'print iq.T.query\n'],
                                   u'file:/home/jaclu/proj/samsok/prv_cli.py': [''\
        'adr_elm, adr_ablm\n',
        'srv[2]\n',
        'len(servers)\n',
        'servers\n',
        "servers == ['']\n",
        "servers == ['',]\n"],
                                   u'file:/home/jaclu/proj/samsok/prv_elmer.py': [''\
        'print prv\n',
        'lst[-1]\n',
        'len(prv)\n',
        'len(prv[1])\n',
        'self._sql_labels[ i ]\n',
        'self._sql_labels[]\n',
        'jid\n'],
                                   u'file:/home/jaclu/proj/samsok/prv_ylm_etno.py': [''\
        'prv[2][1]\n',
        'prv[2]\n',
        'prv\n',
        'prv[0]\n',
        'prv[0][2]\n',
        'prv[0][2][0]\n',
        'prv[0][2][1]\n',
        'prv[0][2][1][0]\n'],
                                   u'file:/home/jaclu/proj/samsok/rdb_ablm.py': [''\
        'print xml\n',
        'print item[0][2]\n',
        'print item\n',
        'dir(transport)\n',
        'print resp\n',
        'print self._jid\n',
        'self._servers[jid][SRV_ONLINE]\n',
        'self.__ns_handlers\n',
        'time.sleep(0)\n',
        'time.sleep(1)\n',
        't\n',
        't = 0\n',
        'recursion=1\n'],
                                   u'file:/home/jaclu/proj/samsok/rdb_cli.py': [''\
        'print resp\n',
        'prv[1][0]\n',
        'prv[1]\n'],
                                   u'file:/home/jaclu/proj/samsok/rdb_dummy.py': [''\
        'node[_C.CONTENT]\n',
        'node[_C.NS]\n',
        'print node[_C.NS]\n',
        'print str(node[_C.NS])\n',
        'toS(node[_C.NS])\n',
        'print toS(node[_C.NS])\n'],
                                   u'file:/home/jaclu/proj/samsok/rdb_elm.py': [""\
        "db_item['item_type'] == 'F\xc3\xb6rem\xc3\xa5l'\n",
        "db_item['item_type'] == u'F\xc3\xb6rem\xc3\xa5l'\n",
        'item.asXml()\n',
        'unicode(param)\n',
        'unicode(34)\n',
        "unicode(db_item['item_type')\n",
        ']\n',
        "unicode(db_item['item_type'])\n",
        "unicode(db_item['item_type'],'utf-8')\n",
        "print unicode(db_item['item_type'],'utf-8')\n",
        'object\n',
        "unicode(u'hej', 'utf-8')\n",
        "unicode('hej', 'utf-8')\n",
        'toU(2)\n',
        'toU(23)\n',
        'item == item2\n',
        'item.toXml() == item2.toXml()\n',
        'print key\n',
        'toU(key)\n',
        'print toU(key)\n',
        "db_item['item_type']\n",
        'item_id\n',
        "self._db_item['item_type']\n",
        'print self.toXml()\n',
        'py_obj\n',
        'parent\n',
        "node['tid1']\n",
        "node['tid1'].strip('-00')\n",
        "node['tid1'].strip('00')\n",
        "node['tid1'].strip('\\00')\n",
        "node['tid1'].strip('\\-00')\n",
        "node['tid1'][:-2]\n",
        "node['tid1'][-2:]\n",
        "node['tid1'][-3:]\n",
        "node['tid1'][:-3]\n",
        "self._item['Identification']\n",
        'print parent.toxml()\n',
        'crm_core.toxml()\n',
        'print self._db_item\n',
        'print self._db_item.keys()\n',
        "print self._db_item['plats']\n",
        'print self\n',
        'len(hits)\n',
        'len(items)\n',
        'print xml\n',
        'stanz\n',
        'stanza\n',
        'errors\n',
        'resp\n',
        'print stanza\n',
        'print resp\n',
        'print iq\n',
        'print r\n',
        'item.Classification\n',
        'item.Category\n',
        "item['Category']\n",
        "item['Classificaton']\n",
        'key\n',
        "a=item['Classificaton']\n",
        '_C.CLASSIFICATION\n',
        'a\n',
        'item[_C.CLASSIFICATION]\n',
        'item[_C.CLASSIFICATION][0][_C.CONTENT]\n',
        'item[_C.CLASSIFICATION][0]\n',
        'item[_C.CLASSIFICATION][1]\n',
        'item[_C.CLASSIFICATION][2]\n',
        'item[_C.CLASSIFICATION][3]\n',
        'item[_C.IDENTIFICATION]\n',
        'item[_C.IDENTIFICATION][0][_C.CONTENT]\n'],
                                   u'file:/home/jaclu/proj/samsok/rdb_elm_srv.py': [''\
        'len(items)\n',
        'len(items[1])\n'],
                                   u'file:/home/jaclu/proj/samsok/rdb_ylm_etno.py': [""\
        "new_auth='sune'\n",
        'new_auth or user\n',
        'print transp._jid\n',
        'print resp\n'],
                                   u'file:/home/jaclu/proj/samsok/samsok/client.py': [''\
        'print resp\n',
        'isResultNode(resp)\n',
        "user = 'dffdfd'\n",
        'dir (self.__con)\n',
        'for s in dir (self.__con): print s\n',
        "password='333'\n"],
                                   u'file:/home/jaclu/proj/samsok/samsok/utils/crm_core_test.py': [''\
        'rel_type_node.toprettyxml()\n',
        'CRM_T_RELATION_REFERED_TO_BY == rel_type\n',
        'rel_type\n',
        'CRM_T_RELATION_REFERED_TO_BY\n',
        'dom.toxml()\n',
        'xmlb\n',
        'xmla==xml2\n',
        'xml_in\n',
        "xml_in.replace('  ','')\n",
        'xmla\n',
        'xml\n',
        'xml_org\n',
        'xml_new\n',
        'xml2\n',
        'data.strip()\n',
        'py_obj[key]\n',
        'py_obj2[key]\n'],
                                   u'file:/home/jaclu/proj/samsok/xml_test.py': [''\
        'core.xml()\n',
        'core\n',
        'core.attributes\n',
        'core.childNodes\n',
        'core.doctype\n',
        'core.firstChild\n',
        'doc\n',
        'core.localName\n',
        'doc.localName\n',
        'doc.childNodes\n',
        'doc.childNodes[0]\n',
        'doc.childNodes[0].toxml()\n',
        'doctoxml()\n',
        'doc.toxml()\n',
        'doc.toprettyxml()\n',
        'print doc.toprettyxml()\n',
        'data[key]\n',
        'print doc.toxml()\n',
        "a=self.doc.createAttributeNS('samsok','hepp')\n",
        'content.namespaceURI\n',
        'content.attributes\n',
        "content.namespaceURI='sss'\n",
        'new_node.appendChild(content)\n',
        "py_obj[key]['content']\n",
        'self._attrsNS.get((namespaceURI, localName))\n',
        'print self.doc.toprettyxml()\n',
        'relation\n',
        'rel_type_node.childNodes[0].localName\n',
        'py_obj2[CRM_T_IDENTIFICATION]\n',
        "py_obj2[CRM_T_IDENTIFICATION] = 'hd'\n",
        'py_obj2 == py_obj\n',
        'py_obj[CRM_T_DESCRIPTION]\n',
        'string\n',
        'self.doc.encoding\n',
        "print self.doc.toxml(encoding='UTF-8')\n",
        'dom\n',
        'print dom\n',
        'print dom.toxml\n',
        'print dom.toxml()\n',
        'dom.doctype\n',
        'print dom.doctype\n',
        'dt\n',
        'print dt\n',
        'print dt.toxml()\n',
        'self.doc.toxml()\n',
        'print self.doc.doctype\n',
        'print node.toprettyxml()\n',
        'print rel_type_node.toxml()\n',
        'print rel_type_node.childNodes\n',
        'print rel_type_node.childNodes[0]\n',
        'print rel_type_node.childNodes[0].localName\n',
        'py_obj2\n',
        'new_node.toxml()\n',
        'rel_node.toxml()\n',
        "rel_type='ss'\n",
        'print node\n',
        'print xml\n',
        'print xml2\n',
        'print nodes\n',
        'print self.doc.toxml()\n',
        'print nodes.toxml()\n',
        'print event\n',
        'print ret\n',
        'tuple( [1] )\n',
        "print ret['Event']\n",
        "print ret['Event'][0]\n",
        "print ret['Event'][1][0]\n",
        "print ret['Event'][1]\n",
        'len(nodes)\n',
        'target\n',
        'print elements.toxml()\n',
        'print elements\n',
        'print elements[0].toxml()\n',
        'print elements[1].toxml()\n',
        'node.childNodes()\n',
        'node.documentElement\n',
        'node.childNodes\n',
        'node.parentNode\n',
        'event\n',
        'print node.toxml()\n',
        'print nod.toxml()\n',
        'py_obj\n',
        'py_obj[key]\n',
        'py_datas\n',
        'py_data\n',
        'xml2\n',
        "py_obj['Category'] == py_obj2['Category']\n",
        "py_obj['Classification'] == py_obj2['Classification']\n",
        'node.toxml()\n',
        'ret\n',
        'new_node.toprettyxml()\n',
        'xml\n',
        'print rel_type_node.toprettyxml()\n',
        'rel_type_node.childNodes[0]\n',
        'rel_type_node.childNodes\n',
        'child.ATTRIBUTE_NODE\n',
        'child.localName\n',
        'print child.toprettyxml()\n',
        'node.childNodes[0].nodeValue\n',
        'node.childNodes[0]\n'],
                                   u'file:/home/jaclu/proj/samsok/ylm_foremal.py': [''\
        'print resp\n',
        'jid\n',
        'print r\n'],
                                   u'file:/home/jaclu/proj/samsok/ylm_tets.py': [''\
        'print resp\n',
        'print location\n',
        'print toS(location)\n',
        'stanza.getFrom()\n',
        'result\n'],
                                   u'file:/home/jaclu/proj/samsok_dev/prv_ablm.py': [''\
        'syntax.__name__\n',
        'syntax.qpName\n',
        'dir(syntax)\n',
        'QPsamsok0_1.qpName\n',
        'QPsamsok0_1().qpName\n',
        'QPsamsok0_1(None).qpName\n',
        'self._servers[jid][SRV_PRIM_QP].qpName\n',
        'queryparsers.known_queryparsers.keys()\n',
        'print p[0]\n',
        'node\n',
        'print node\n',
        'print np\n',
        'print p\n',
        'print xmlparams\n',
        'info\n',
        'resp.T.query.getData()\n',
        'self._provider._qp[qp]\n',
        'queryparsers.known_queryparsers\n',
        'queryparsers.known_queryparsers[qp]\n',
        "queryparsers.known_queryparsers[qp]['from_xml']\n",
        'print q2\n',
        'print iq2\n',
        'print result\n',
        'data=2\n',
        "self._servers[jid][SRV_PRIM_QP]=''\n",
        'dir(xmpp(\n',
        '))\n',
        'dir(xmpp)\n',
        'self._servers[jid][SRV_PRIM_QP]\n',
        'print iq\n',
        '        self._pingers\n',
        'self._pingers\n',
        'self._ping_cbs\n',
        'self._pinger_cbs\n',
        'ses.send()\n',
        'len(raw_data)\n',
        'self.__jid.getDomain()\n',
        'lock\n',
        'print str(lock)\n',
        'new_user, new_password\n',
        'jid.__str__\n',
        'jid.__str__()\n',
        'jid.getNode()\n',
        'dir(self)\n',
        'self.__class__\n',
        'self.__class__.__bases__\n',
        'self.__caller__\n',
        'self.__owner__\n',
        'self.__parent__\n',
        'self.__parrent__\n',
        "server=''\n",
        'jid\n',
        'print jid\n',
        'user\n',
        "user='sune'\n",
        'print self.__jid()\n',
        'print self.__jid\n',
        'print time.localtime()\n',
        'print time.asctime()\n',
        'thread.get_ident()\n',
        'self.single_thread\n',
        'not (self.single_thread and self.thread_started)\n',
        'not (self.single_thread or not self.thread_started)\n',
        'not (self.single_thread or (not self.thread_started))\n',
        'not (self.single_thread and not self.thread_started)\n',
        'not (self.single_thread and (not self.thread_started))\n',
        'self.thread_started\n',
        'not self.thread_started\n',
        'not self.thread_started and not self.single_thread\n',
        'self._servers\n',
        'self._servers.keys()\n',
        ' self._servers[jid]\n',
        'self._servers[jid]\n',
        'self._lck_net\n',
        'self._lck_net.locked\n',
        'self._lck_net.locked()\n',
        'self.handlers\n',
        'self.handlers.keys()\n',
        'self.handlers[xmlns].keys()\n',
        'xmlns\n',
        'self.handlers[xmlns][name].keys()\n',
        'self.handlers[xmlns][name]\n',
        'self.handlers[xmlns][name][typ+ns]\n',
        'self._waiters.keys\n',
        'self._waiters.keys()\n',
        'self.__waiters\n',
        'self._waiters\n',
        'print resp\n',
        'print stanza\n',
        'print stanza.T.query\n',
        'print stanza.T.error.getChildren()\n',
        'print stanza.T.error.getChildren()[0]\n',
        'print stanza.T.error.getChildren()[1]\n',
        'print stanza.T.error.getChildren()[0].getname()\n',
        'print stanza.T.error.getChildren()[0].getName()\n',
        'print stanza.T.error.getChildren()[1].getName()\n',
        'print stanza.T.error\n',
        'print stanza.T.error.getChildren()[2].getName()\n',
        'r\n',
        'c.getNamespace()\n'],
                                   u'file:/home/jaclu/proj/samsok_dev/prv_cli.py': [''\
        'print iq\n',
        'print self.__waiters\n',
        'print self.__waiters[1]\n',
        'print stanza\n',
        'args\n',
        'self._expected\n',
        'stanza\n',
        'stanza.getID()\n',
        'queryparsers.known_queryparsers.keys()[0]\n']},
                       'sel-line': 24,
                       'sel-line-start': 1905,
                       'selection_end': 1909,
                       'selection_start': 1909}),
                     ('python-shell',
                      'wide',
                      0,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {None: ['import datetime\n',
        'datetime.datetime()\n',
        'datetime.datetime\n',
        "datetime.datetime('now')\n",
        'datetime.datetime(0)\n',
        'datetime.time()\n',
        'import time\n',
        'time.localtime()\n',
        'time.ctime(time.localtime())\n',
        'time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime())\n',
        'time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())\n',
        'time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime())\n',
        'time.strftime("%Y-%M-%D %H:%M:%S", time.localtime())\n',
        'time.strftime("%Y-%M-%d %H:%M:%S", time.localtime())\n',
        'time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())\n']},
                       'sel-line': 14,
                       'sel-line-start': 304,
                       'selection_end': 308,
                       'selection_start': 308}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'self.result',
                                       'fReverse': False,
                                       'fSearchText': u'_thread',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('versioncontrol.svn',
                      'wide',
                      0,
                      {})],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('sip_manager/apps/plug_uris/README.txt'),
        {'attrib-starts': [],
         'first-line': 0,
         'folded-linenos': [],
         'sel-line': 27,
         'sel-line-start': 782,
         'selection_end': 799,
         'selection_start': 799},
        1269356904.7352121),
        (loc('sip_manager/apps/plug_uris/runner.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 36,
          'sel-line-start': 803,
          'selection_end': 807,
          'selection_start': 807},
         1269356906.6314771),
        (loc('sip_manager/apps/plug_uris/README.txt'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 27,
          'sel-line-start': 782,
          'selection_end': 799,
          'selection_start': 799},
         1269356917.3187561),
        (loc('sip_manager/apps/plug_uris/runner.py'),
         {'attrib-starts': [('destructor',
                             36)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 38,
          'sel-line-start': 830,
          'selection_end': 830,
          'selection_start': 830},
         1269356918.3430121),
        (loc('sip_manager/apps/plug_uris/README.txt'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 27,
          'sel-line-start': 782,
          'selection_end': 799,
          'selection_start': 799},
         1269356925.5814281),
        (loc('sip_manager/apps/plug_uris/runner.py'),
         {'attrib-starts': [('file_tree_monitor',
                             39)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 41,
          'sel-line-start': 865,
          'selection_end': 865,
          'selection_start': 865},
         1269356927.188905),
        (loc('sip_manager/apps/plug_uris/README.txt'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 14,
          'sel-line-start': 258,
          'selection_end': 401,
          'selection_start': 258},
         1269356937.9896629),
        (loc('sip_manager/apps/plug_uris/runner.py'),
         {'attrib-starts': [('constructor',
                             30)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 34,
          'sel-line-start': 928,
          'selection_end': 928,
          'selection_start': 928},
         1269356945.1331329),
        (loc('sip_manager/apps/plug_uris/README.txt'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 18,
          'sel-line-start': 414,
          'selection_end': 648,
          'selection_start': 414},
         1269356961.899714),
        (loc('sip_manager/apps/plug_uris/runner.py'),
         {'attrib-starts': [('processor',
                             35)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 42,
          'sel-line-start': 1211,
          'selection_end': 1211,
          'selection_start': 1211},
         1269356965.9149361),
        (loc('sip_manager/apps/plug_uris/README.txt'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 24,
          'sel-line-start': 662,
          'selection_end': 781,
          'selection_start': 662},
         1269356983.9058449),
        (loc('sip_manager/apps/plug_uris/runner.py'),
         {'attrib-starts': [('file_tree_monitor',
                             47)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 48,
          'sel-line-start': 1390,
          'selection_end': 1398,
          'selection_start': 1398},
         1269356986.6096389),
        (loc('sip_manager/apps/plug_uris/README.txt'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 28,
          'sel-line-start': 801,
          'selection_end': 930,
          'selection_start': 801},
         1269357037.2047241),
        (loc('sip_manager/apps/plug_uris/runner.py'),
         {'attrib-starts': [],
          'first-line': 1,
          'folded-linenos': [],
          'sel-line': 28,
          'sel-line-start': 744,
          'selection_end': 778,
          'selection_start': 778},
         1269357040.0292981),
        (loc('sip_manager/apps/base_item/models.py'),
         {'attrib-starts': [('MdRecord',
                             31)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 31,
          'sel-line-start': 768,
          'selection_end': 782,
          'selection_start': 774},
         1269357237.7319069),
        (loc('sip_manager/apps/plug_uris/runner.py'),
         {'attrib-starts': [('processor',
                             42)],
          'first-line': 7,
          'folded-linenos': [],
          'sel-line': 49,
          'sel-line-start': 1555,
          'selection_end': 1624,
          'selection_start': 1624},
         1269357241.193002),
        (loc('sip_manager/apps/base_item/models.py'),
         {'attrib-starts': [('MdRecord',
                             31)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 31,
          'sel-line-start': 768,
          'selection_end': 782,
          'selection_start': 774},
         1269357560.273874),
        (loc('sip_manager/apps/plug_uris/runner.py'),
         {'attrib-starts': [('processor',
                             42)],
          'first-line': 7,
          'folded-linenos': [],
          'sel-line': 49,
          'sel-line-start': 1555,
          'selection_end': 1624,
          'selection_start': 1624},
         1269357561.6119449),
        (loc('sip_manager/apps/plug_uris/README.txt'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 18,
          'sel-line-start': 414,
          'selection_end': 414,
          'selection_start': 414},
         1269357563.3379991),
        [loc('sip_manager/apps/plug_uris/runner.py'),
         {'attrib-starts': [('processor',
                             42)],
          'first-line': 7,
          'folded-linenos': [],
          'sel-line': 49,
          'sel-line-start': 1555,
          'selection_end': 1624,
          'selection_start': 1624},
         1269357571.7367451]],
        19),
        'current-loc': loc('sip_manager/apps/plug_uris/runner.py'),
        'editor-states': {loc('sip_manager/apps/base_item/models.py'): {'att'\
        'rib-starts': [('MdRecord',
                        31)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 31,
        'sel-line-start': 768,
        'selection_end': 782,
        'selection_start': 774},
                          loc('sip_manager/apps/cache_machine/management/commands/cachemachine.py'): {''\
        'attrib-starts': [],
        'first-line': 4,
        'folded-linenos': [],
        'sel-line': 14,
        'sel-line-start': 433,
        'selection_end': 466,
        'selection_start': 466},
                          loc('sip_manager/apps/plug_uris/README.txt'): {'at'\
        'trib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 18,
        'sel-line-start': 414,
        'selection_end': 414,
        'selection_start': 414},
                          loc('sip_manager/apps/plug_uris/models.py'): {'att'\
        'rib-starts': [('Uri',
                        63)],
        'first-line': 24,
        'folded-linenos': [],
        'sel-line': 71,
        'sel-line-start': 1936,
        'selection_end': 1970,
        'selection_start': 1970},
                          loc('sip_manager/apps/plug_uris/runner.py'): {'att'\
        'rib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 29,
        'sel-line-start': 787,
        'selection_end': 787,
        'selection_start': 787},
                          loc('sip_manager/utils/gen_utils.py'): {'attrib-st'\
        'arts': [('dict_2_django_choice',
                  26)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 26,
        'sel-line-start': 735,
        'selection_end': 759,
        'selection_start': 739},
                          loc('sip_manager/utils/glob_consts.py'): {'attrib-'\
        'starts': [],
        'first-line': 28,
        'folded-linenos': [],
        'sel-line': 44,
        'sel-line-start': 1028,
        'selection_end': 1028,
        'selection_start': 1028}},
        'has-focus': True},
                               'open_files': [u'sip_manager/apps/cache_machine/management/commands/cachemachine.py',
        u'sip_manager/utils/gen_utils.py',
        u'sip_manager/utils/glob_consts.py',
        u'sip_manager/apps/plug_uris/models.py',
        u'sip_manager/apps/base_item/models.py',
        u'sip_manager/apps/plug_uris/README.txt',
        u'sip_manager/apps/plug_uris/runner.py']},
        'split_percents': {0: 0.5},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.66913123844731981},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         63,
                         1920,
                         1152)}]}
guimgr.recent-documents = [loc('sip_manager/apps/plug_uris/runner.py'),
                           loc('sip_manager/apps/plug_uris/README.txt'),
                           loc('sip_manager/apps/base_item/models.py'),
                           loc('sip_manager/apps/plug_uris/models.py'),
                           loc('sip_manager/utils/glob_consts.py'),
                           loc('sip_manager/utils/gen_utils.py')]
