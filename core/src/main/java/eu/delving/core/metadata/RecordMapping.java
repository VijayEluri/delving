/*
 * Copyright 2010 DELVING BV
 *
 *  Licensed under the EUPL, Version 1.0 or? as soon they
 *  will be approved by the European Commission - subsequent
 *  versions of the EUPL (the "Licence");
 *  you may not use this work except in compliance with the
 *  Licence.
 *  You may obtain a copy of the Licence at:
 *
 *  http://ec.europa.eu/idabc/eupl
 *
 *  Unless required by applicable law or agreed to in
 *  writing, software distributed under the Licence is
 *  distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *  express or implied.
 *  See the Licence for the specific language governing
 *  permissions and limitations under the Licence.
 */

package eu.delving.core.metadata;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import org.apache.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * A groovy mapping based on a model.
 *
 * @author Gerald de Jong <geralddejong@gmail.com>
 */

@XStreamAlias("record-mapping")
public class RecordMapping {
    private static final String RECORD_PREFIX = "output.record {"; // todo: this shouldn't be necessary
    private static final String RECORD_SUFFIX = "}";

    @XStreamAlias("record-root")
    String recordRoot;

    @XStreamAlias("record-count")
    int recordCount;

    @XStreamAlias("constants")
    Map<String, String> constants = new HashMap<String, String>();

    @XStreamAlias("field-mappings")
    Map<String, FieldMapping> fieldMappings = new HashMap<String, FieldMapping>();

    public Path getRecordRoot() {
        if (recordRoot == null) {
            return null;
        }
        return new Path(recordRoot);
    }

    public int getRecordCount() {
        return recordCount;
    }

    public String getConstant(String path) {
        return constants.get(path);
    }

    public Collection<FieldMapping> getFieldMappings() {
        return fieldMappings.values();
    }

    public void apply(RecordDefinition recordDefinition) {
        for (Map.Entry<String, FieldMapping> entry : fieldMappings.entrySet()) {
            Path path = new Path(entry.getKey());
            entry.getValue().fieldDefinition = recordDefinition.getFieldDefinition(path);
        }
    }

    public FieldMapping getFieldMapping(String path) {
        return fieldMappings.get(path);
    }

    public String toCode(RecordDefinition recordDefinition) {
        return toCode(recordDefinition, null);
    }

    public String toCode(RecordDefinition recordDefinition, String selectedPath) {
        final StringBuilder stringBuilder = new StringBuilder();
        Out out = new Out() {
            int indentLevel;

            @Override
            public void line(String line) {
                int spaces = indentLevel * 4;
                while (spaces-- > 0) {
                    stringBuilder.append(' ');
                }
                stringBuilder.append(line).append('\n');
            }

            @Override
            public void indent(int change) {
                indentLevel += change;
            }
        };
        out.line("// Groovy Mapping Code - Generated by SIP-Creator\n");
        out.line("// Constants\n");
        for (Map.Entry<String, String> constantEntry : constants.entrySet()) {
            out.line(String.format("def %s = '%s'\n", constantEntry.getKey(), constantEntry.getValue()));
        }
        out.line("\n// Value Maps\n");
        for (Map.Entry<String, FieldMapping> fieldMappingEntry : fieldMappings.entrySet()) {
            if (fieldMappingEntry.getValue().valueMap != null) {
                String path = mungePath(fieldMappingEntry.getKey());
                out.line(String.format("def %sMap = [\n", path));
                out.indent(1);
                for (Map.Entry<String, String> entry : fieldMappingEntry.getValue().valueMap.entrySet()) {
                    out.line(String.format("'%s':'%s,", entry.getKey(), entry.getValue()));
                }
                out.indent(-1);
                out.line("]");
                out.line(String.format("def %s = { def v = %sMap[it.toString()]; return v ? v : it }\n", path, path));
            }
        }
        out.line("// Builder to create the record\n");
        out.line("output.");
        out.indent(1);
        Set<String> usedPaths = new TreeSet<String>();
        toCode("", recordDefinition.root, out, usedPaths, selectedPath);
        out.indent(-1);
        if (usedPaths.size() != fieldMappings.size()) {
            Set<String> unusedPaths = new TreeSet<String>(fieldMappings.keySet());
            unusedPaths.removeAll(usedPaths);
            Logger.getLogger(getClass()).warn("unused paths: " + unusedPaths);
        }
        return stringBuilder.toString();
    }

    public String toString() {
        return stream().toXML(this);
    }

    // === private

    private void toCode(String path, ElementDefinition element, Out out, Set<String> usedPaths, String selectedPath) {
        if (selectedPath != null && !selectedPath.startsWith(path)) {
            return;
        }
        out.line(String.format("%s {", element.tag));
        out.indent(1);
        if (element.elements != null) {
            for (ElementDefinition subNode : element.elements) {
                toCode(path + "/" + element.tag, subNode, out, usedPaths, selectedPath);
            }
        }
        if (element.fields != null) {
            for (FieldDefinition fieldDefinition : element.fields) {
                toCode(path + "/" + element.tag, fieldDefinition, out, usedPaths, selectedPath);
            }
        }
        out.indent(-1);
        out.line("}");
    }

    private void toCode(String path, FieldDefinition field, Out out, Set<String> usedPaths, String selectedPath) {
        String fieldPath = path + "/" + field.getTag();
        if (selectedPath != null && !selectedPath.equals(fieldPath)) {
            return;
        }
        FieldMapping fieldMapping = fieldMappings.get(fieldPath);
        if (fieldMapping != null) {
            usedPaths.add(fieldPath);
            for (String line : fieldMapping.code) {
                if (codeIndent(line) < 0) {
                    out.indent(-1);
                }
                out.line(line);
                if (codeIndent(line) > 0) {
                    out.indent(1);
                }
            }
        }
    }

    private static int codeIndent(String line) {
        int indent = 0;
        for (char c : line.toCharArray()) {
            switch (c) {
                case '}':
                    indent--;
                    break;
                case '{':
                    indent++;
                    break;
            }
        }
        return indent;
    }

    private String mungePath(String path) {
        return path.replaceAll("/", "__");
    }

    public static String getCodeForCompile(String code) {
        StringBuilder out = new StringBuilder();
        out.append(RECORD_PREFIX).append('\n');
        out.append(code);
        out.append(RECORD_SUFFIX).append('\n');
        return out.toString();
    }

    interface Out {
        void line(String line);

        void indent(int change);
    }

    public static void write(RecordMapping mapping, OutputStream out) {
        stream().toXML(mapping, out);
    }

    public static RecordMapping read(InputStream is) {
        return (RecordMapping) stream().fromXML(is);
    }

    public static RecordMapping read(String string) {
        return (RecordMapping) stream().fromXML(string);
    }

    static XStream stream() {
        XStream stream = new XStream();
        stream.processAnnotations(RecordMapping.class);
        return stream;
    }

}
